openapi: 3.0.3
info:
  title: Agromart Multi-Tenant SaaS Inventory Platform API
  description: |
    Enterprise-grade inventory management platform for agricultural SaaS applications.
    Supports multi-tenant data isolation, real-time product tracking, order management,
    invoicing with GST compliance, and comprehensive analytics.
  version: 1.0.0
  contact:
    name: API Support
    email: support@agromart.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.agromart.com/v1
    description: Production server
  - url: https://staging-api.agromart.com/v1
    description: Staging server
  - url: http://localhost:8080/v1
    description: Local development server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from authentication endpoint

  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: "Error description"
      required:
        - message

    ValidationError:
      type: object
      properties:
        message:
          type: string
          example: "Validation failed"
        errors:
          type: object
          additionalProperties:
            type: string
          example:
            email: "Invalid email format"
            password: "Password must be at least 8 characters"

    UUID:
      type: string
      format: uuid
      example: "123e4567-e89b-12d3-a456-426614174000"

    # Authentication schemas
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
      required:
        - email
        - password

    SignupRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        tenant_subdomain:
          type: string
          nullable: true
          example: "mycompany"
      required:
        - email
        - password
        - first_name
        - last_name

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        grant_type:
          type: string
          enum: ["refresh_token"]
          example: "refresh_token"
      required:
        - refresh_token
        - grant_type

    LogoutRequest:
      type: object
      properties:
        token_type_hint:
          type: string
          enum: ["access_token", "refresh_token"]
          example: "access_token"
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      required:
        - token

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        refresh_token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        token_type:
          type: string
          example: "Bearer"
        expires_in:
          type: integer
          example: 3600
        user:
          $ref: "#/components/schemas/User"

    # User schemas
    User:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        email:
          type: string
          format: email
          example: "user@example.com"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        status:
          type: string
          enum: ["active", "inactive", "pending"]
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - email
        - first_name
        - last_name
        - status
        - created_at
        - updated_at

    UserCreate:
      type: object
      properties:
        email:
          type: string
          format: email
          example: "user@example.com"
        password:
          type: string
          minLength: 8
          example: "password123"
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        tenant_id:
          $ref: "#/components/schemas/UUID"
          example: "123e4567-e89b-12d3-a456-426614174000"
      required:
        - email
        - password
        - first_name
        - last_name
        - tenant_id

    UserUpdate:
      type: object
      properties:
        first_name:
          type: string
          nullable: true
          example: "John"
        last_name:
          type: string
          nullable: true
          example: "Doe"
        status:
          type: string
          nullable: true
          enum: ["active", "inactive", "pending"]
          example: "active"

    # Tenant schemas
    Tenant:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "AgroFarm Solutions"
        subdomain:
          type: string
          example: "agrofarm"
        license:
          type: string
          example: "LIC123456789"
        status:
          type: string
          enum: ["active", "inactive", "trial"]
          example: "active"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - name
        - subdomain
        - status
        - created_at
        - updated_at

    TenantCreate:
      type: object
      properties:
        name:
          type: string
          example: "AgroFarm Solutions"
        subdomain:
          type: string
          example: "agrofarm"
        license:
          type: string
          example: "LIC123456789"
      required:
        - name
        - subdomain
        - license

    TenantUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "AgroFarm Solutions"
        status:
          type: string
          nullable: true
          enum: ["active", "inactive", "trial"]
          example: "active"

    # Category schemas
    Category:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "Fertilizers"
        description:
          type: string
          nullable: true
          example: "Agricultural fertilizers and chemicals"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - created_at
        - updated_at

    CategoryCreate:
      type: object
      properties:
        name:
          type: string
          example: "Fertilizers"
        description:
          type: string
          nullable: true
          example: "Agricultural fertilizers and chemicals"
      required:
        - name

    CategoryUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "Fertilizers"
        description:
          type: string
          nullable: true
          example: "Agricultural fertilizers and chemicals"

    # Warehouse schemas
    Warehouse:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "Main Distribution Center"
        address:
          type: string
          nullable: true
          example: "123 Industrial Zone, City, State 12345"
        capacity:
          type: integer
          nullable: true
          minimum: 0
          example: 10000
        license_number:
          type: string
          nullable: true
          example: "WH123456789"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - created_at
        - updated_at

    WarehouseCreate:
      type: object
      properties:
        name:
          type: string
          example: "Main Distribution Center"
        address:
          type: string
          nullable: true
          example: "123 Industrial Zone, City, State 12345"
        capacity:
          type: integer
          nullable: true
          minimum: 0
          example: 10000
        license_number:
          type: string
          nullable: true
          example: "WH123456789"
      required:
        - name

    WarehouseUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "Main Distribution Center"
        address:
          type: string
          nullable: true
          example: "123 Industrial Zone, City, State 12345"
        capacity:
          type: integer
          nullable: true
          minimum: 0
          example: 10000
        license_number:
          type: string
          nullable: true
          example: "WH123456789"

    # Supplier schemas
    Supplier:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "AgroChem Industries Ltd"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "contact@agrochemicals.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0123"
        address:
          type: string
          nullable: true
          example: "456 Chemical Lane, Industrial City, IC 67890"
        license_number:
          type: string
          nullable: true
          example: "SUP987654321"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - created_at
        - updated_at

    SupplierCreate:
      type: object
      properties:
        name:
          type: string
          example: "AgroChem Industries Ltd"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "contact@agrochemicals.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0123"
        address:
          type: string
          nullable: true
          example: "456 Chemical Lane, Industrial City, IC 67890"
        license_number:
          type: string
          nullable: true
          example: "SUP987654321"
      required:
        - name

    SupplierUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "AgroChem Industries Ltd"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "contact@agrochemicals.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0123"
        address:
          type: string
          nullable: true
          example: "456 Chemical Lane, Industrial City, IC 67890"
        license_number:
          type: string
          nullable: true
          example: "SUP987654321"

    # Distributor schemas (similar to Supplier)
    Distributor:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "Regional Farm Supplies Inc"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "orders@regionalfarms.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0456"
        address:
          type: string
          nullable: true
          example: "789 Rural Route, Farming Valley, FV 13579"
        license_number:
          type: string
          nullable: true
          example: "DIST456789"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - created_at
        - updated_at

    DistributorCreate:
      type: object
      properties:
        name:
          type: string
          example: "Regional Farm Supplies Inc"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "orders@regionalfarms.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0456"
        address:
          type: string
          nullable: true
          example: "789 Rural Route, Farming Valley, FV 13579"
        license_number:
          type: string
          nullable: true
          example: "DIST456789"
      required:
        - name

    DistributorUpdate:
      type: object
      properties:
        name:
          type: string
          nullable: true
          example: "Regional Farm Supplies Inc"
        contact_email:
          type: string
          format: email
          nullable: true
          example: "orders@regionalfarms.com"
        contact_phone:
          type: string
          nullable: true
          example: "+1-555-0456"
        address:
          type: string
          nullable: true
          example: "789 Rural Route, Farming Valley, FV 13579"
        license_number:
          type: string
          nullable: true
          example: "DIST456789"

    Product:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        category_id:
          $ref: "#/components/schemas/UUID"
        name:
          type: string
          example: "Premium Fertilizer"
        batch_number:
          type: string
          nullable: true
          example: "BATCH001"
        expiry_date:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
        quantity:
          type: integer
          minimum: 0
          example: 500
        unit_price:
          type: number
          format: float
          minimum: 0
          example: 15.99
        barcode:
          type: string
          nullable: true
          example: "123456789012"
        unit_of_measure:
          type: string
          nullable: true
          example: "kg"
        description:
          type: string
          nullable: true
          example: "High-quality agricultural fertilizer"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - name
        - quantity
        - unit_price
        - created_at
        - updated_at

    ProductCreate:
      type: object
      properties:
        name:
          type: string
          minLength: 1
          example: "Premium Fertilizer"
        category_id:
          $ref: "#/components/schemas/UUID"
          nullable: true
        batch_number:
          type: string
          nullable: true
          example: "BATCH001"
        expiry_date:
          type: string
          format: date
          nullable: true
          example: "2025-12-31"
        quantity:
          type: integer
          minimum: 0
          example: 500
        unit_price:
          type: number
          format: float
          minimum: 0
          example: 15.99
        barcode:
          type: string
          nullable: true
          example: "123456789012"
        unit_of_measure:
          type: string
          nullable: true
          example: "kg"
        description:
          type: string
          nullable: true
          example: "High-quality agricultural fertilizer"
      required:
        - name
        - quantity
        - unit_price

    ProductUpdate:
      allOf:
        - $ref: "#/components/schemas/ProductCreate"
        - type: object
          properties:
            name:
              type: string
              nullable: true
            quantity:
              type: integer
              nullable: true
            unit_price:
              type: number
              format: float
              nullable: true

    Order:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        order_type:
          type: string
          enum: [purchase, sales]
          example: "purchase"
        product_id:
          $ref: "#/components/schemas/UUID"
        warehouse_id:
          $ref: "#/components/schemas/UUID"
        supplier_id:
          $ref: "#/components/schemas/UUID"
          nullable: true
        distributor_id:
          $ref: "#/components/schemas/UUID"
          nullable: true
        quantity:
          type: integer
          minimum: 1
          example: 100
        unit_price:
          type: number
          format: float
          minimum: 0
          example: 15.99
        total_amount:
          type: number
          format: float
          example: 1599.00
        status:
          type: string
          enum: [pending, approved, processing, shipped, delivered, cancelled]
          example: "pending"
        expected_delivery:
          type: string
          format: date
          nullable: true
          example: "2024-02-01"
        actual_delivery:
          type: string
          format: date-time
          nullable: true
          example: "2024-02-01T14:30:00Z"
        notes:
          type: string
          nullable: true
          example: "Urgent delivery required"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - order_type
        - product_id
        - warehouse_id
        - quantity
        - unit_price
        - status
        - created_at
        - updated_at

    OrderCreate:
      type: object
      properties:
        order_type:
          type: string
          enum: [purchase, sales]
          example: "purchase"
        product_id:
          $ref: "#/components/schemas/UUID"
        warehouse_id:
          $ref: "#/components/schemas/UUID"
        quantity:
          type: integer
          minimum: 1
          example: 100
        unit_price:
          type: number
          format: float
          minimum: 0
          example: 15.99
        expected_delivery:
          type: string
          format: date
          nullable: true
          example: "2024-02-01"
        supplier_id:
          $ref: "#/components/schemas/UUID"
          nullable: true
        distributor_id:
          $ref: "#/components/schemas/UUID"
          nullable: true
        notes:
          type: string
          nullable: true
          example: "Urgent delivery required"
      required:
        - order_type
        - product_id
        - warehouse_id
        - quantity
        - unit_price

    Invoice:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        tenant_id:
          $ref: "#/components/schemas/UUID"
        order_id:
          $ref: "#/components/schemas/UUID"
        gstin:
          type: string
          nullable: true
          example: "22AAAAA0000A1Z5"
        gst_rate:
          type: number
          format: float
          nullable: true
          example: 18.0
        taxable_amount:
          type: number
          format: float
          nullable: true
          example: 1000.00
        cgst:
          type: number
          format: float
          nullable: true
          example: 90.00
        sgst:
          type: number
          format: float
          nullable: true
          example: 90.00
        igst:
          type: number
          format: float
          nullable: true
          example: 180.00
        total_amount:
          type: number
          format: float
          example: 1180.00
        status:
          type: string
          enum: [unpaid, paid, overdue]
          example: "unpaid"
        issued_date:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        paid_date:
          type: string
          format: date-time
          nullable: true
          example: "2024-02-15T10:30:00Z"
        created_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
        updated_at:
          type: string
          format: date-time
          example: "2024-01-15T10:30:00Z"
      required:
        - id
        - tenant_id
        - order_id
        - total_amount
        - status
        - issued_date
        - created_at
        - updated_at

    InvoiceCreate:
      type: object
      properties:
        order_id:
          $ref: "#/components/schemas/UUID"
        gstin:
          type: string
          nullable: true
          example: "22AAAAA0000A1Z5"
      required:
        - order_id

    ProductAnalytics:
      type: object
      properties:
        analytics:
          type: object
          additionalProperties:
            type: integer
          example:
            Fertilizers: 150
            Pesticides: 80
            Seeds: 300
            Tools: 45
            "Uncategorized": 25
        description:
          type: string
          example: "Category distribution of products"

    OrderAnalytics:
      type: object
      properties:
        total_orders:
          type: integer
          example: 245
        pending_orders:
          type: integer
          example: 15
        completed_orders:
          type: integer
          example: 200
        cancelled_orders:
          type: integer
          example: 30
        total_revenue:
          type: number
          format: float
          example: 125000.50
        average_order_value:
          type: number
          format: float
          example: 510.20

  parameters:
    tenantHeader:
      name: X-Tenant-ID
      in: header
      description: Tenant identifier for multi-tenant data isolation
      required: true
      schema:
        $ref: "#/components/schemas/UUID"
    limitParam:
      name: limit
      in: query
      description: Maximum number of items to return
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10
    offsetParam:
      name: offset
      in: query
      description: Number of items to skip
      schema:
        type: integer
        minimum: 0
        default: 0

paths:
  /health:
    get:
      summary: Health check endpoint
      description: Check the health status of the API and its dependencies
      tags:
        - System
      responses:
        "200":
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "healthy"
                  timestamp:
                    type: string
                    format: date-time
                  services:
                    type: object
                    properties:
                      database:
                        type: string
                        example: "healthy"
                      redis:
                        type: string
                        example: "healthy"
                      storage:
                        type: string
                        example: "healthy"

  /products:
    post:
      summary: Create a new product
      description: Create a new product record for the authenticated tenant
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductCreate"
      responses:
        "201":
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product created successfully"
                  product:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

    get:
      summary: List products
      description: Get a paginated list of products for the authenticated tenant
      tags:
        - Products
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: List of products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  limit:
                    type: integer
                    example: 10
                  offset:
                    type: integer
                    example: 0
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /products/search:
    get:
      summary: Search products
      description: Search products by name, barcode, or category with optional filters
      tags:
        - Products
      parameters:
        - name: q
          in: query
          description: Search query (name, barcode, or category)
          schema:
            type: string
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            $ref: "#/components/schemas/UUID"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  products:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
                  limit:
                    type: integer
                  offset:
                    type: integer
                  query:
                    type: string
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /products/analytics:
    get:
      summary: Product analytics
      description: Get product category distribution analytics
      tags:
        - Products
        - Analytics
      responses:
        "200":
          description: Product analytics data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProductAnalytics"
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /products/{productId}:
    parameters:
      - name: productId
        in: path
        required: true
        description: Product ID
        schema:
          $ref: "#/components/schemas/UUID"

    get:
      summary: Get product by ID
      description: Get detailed information about a specific product
      tags:
        - Products
      responses:
        "200":
          description: Product details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Product not found
        "500":
          description: Internal server error

    put:
      summary: Update product
      description: Update an existing product record
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProductUpdate"
      responses:
        "200":
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product updated successfully"
                  product:
                    $ref: "#/components/schemas/Product"
        "400":
          description: Invalid request data
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Product not found
        "500":
          description: Internal server error

    delete:
      summary: Delete product
      description: Permanently delete a product record
      tags:
        - Products
      responses:
        "200":
          description: Product deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Product deleted successfully"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Product not found
        "500":
          description: Internal server error

  /products/{productId}/images:
    parameters:
      - name: productId
        in: path
        required: true
        description: Product ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Upload product image
      description: Upload and associate an image with a product
      tags:
        - Products
        - Images
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: Image file (JPEG, PNG, etc.)
                alt_text:
                  type: string
                  description: Alternative text for the image
      responses:
        "201":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image uploaded successfully"
        "400":
          description: Invalid file or request
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

    get:
      summary: Get product images
      description: Get all images associated with a product
      tags:
        - Products
        - Images
      responses:
        "200":
          description: Product images
          content:
            application/json:
              schema:
                type: object
                properties:
                  images:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: "#/components/schemas/UUID"
                        product_id:
                          $ref: "#/components/schemas/UUID"
                        image_url:
                          type: string
                          example: "https://cdn.example.com/images/abc123.jpg"
                        alt_text:
                          type: string
                          nullable: true
                          example: "Product showcase"
                        created_at:
                          type: string
                          format: date-time
                  count:
                    type: integer
                    example: 3
                  product_id:
                    $ref: "#/components/schemas/UUID"
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /products/{productId}/images/{imageId}/url:
    parameters:
      - name: productId
        in: path
        required: true
        description: Product ID
        schema:
          $ref: "#/components/schemas/UUID"
      - name: imageId
        in: path
        required: true
        description: Image ID
        schema:
          $ref: "#/components/schemas/UUID"
      - name: expiry_minutes
        in: query
        description: URL expiry time in minutes (default 1440 - 24 hours)
        schema:
          type: integer
          minimum: 1
          maximum: 10080  # 7 days
          default: 1440

    get:
      summary: Get product image URL
      description: Generate a presigned URL for downloading a product image
      tags:
        - Products
        - Images
      responses:
        "200":
          description: Image download URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  url:
                    type: string
                    example: "https://storage.example.com/..."
                  expires_in:
                    type: string
                    example: "24h0m0s"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Image not found
        "500":
          description: Internal server error

  /products/{productId}/images/{imageId}:
    parameters:
      - name: productId
        in: path
        required: true
        description: Product ID
        schema:
          $ref: "#/components/schemas/UUID"
      - name: imageId
        in: path
        required: true
        description: Image ID
        schema:
          $ref: "#/components/schemas/UUID"

    delete:
      summary: Delete product image
      description: Delete an image associated with a product
      tags:
        - Products
        - Images
      responses:
        "200":
          description: Image deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Image deleted successfully"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Image not found
        "500":
          description: Internal server error

  /orders:
    post:
      summary: Create a new order
      description: Create a new purchase or sales order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/OrderCreate"
      responses:
        "201":
          description: Order created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order created successfully"
                  order:
                    $ref: "#/components/schemas/Order"
        "400":
          description: Invalid request data
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

    get:
      summary: List orders
      description: Get a paginated list of orders for the authenticated tenant
      tags:
        - Orders
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /orders/search:
    get:
      summary: Search orders
      description: Search orders by status with optional filters
      tags:
        - Orders
      parameters:
        - name: status
          in: query
          description: Filter by order status
          schema:
            type: string
            enum: [pending, approved, processing, shipped, delivered, cancelled]
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: Search results
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: "#/components/schemas/Order"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /orders/analytics:
    get:
      summary: Order analytics
      description: Get order analytics and metrics for date range
      tags:
        - Orders
        - Analytics
      parameters:
        - name: start_date
          in: query
          description: "Start date for analytics (default: 1 month ago)"
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: "End date for analytics (default: today)"
          schema:
            type: string
            format: date
      responses:
        "200":
          description: Order analytics data
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderAnalytics"
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /orders/{orderId}:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    get:
      summary: Get order by ID
      description: Get detailed information about a specific order
      tags:
        - Orders
      responses:
        "200":
          description: Order details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/approve:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Approve order
      description: Approve a pending order to start processing
      tags:
        - Orders
      responses:
        "200":
          description: Order approved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order approved successfully"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/process:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Process order
      description: Start processing an approved order
      tags:
        - Orders
      responses:
        "200":
          description: Order processing started
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order processed successfully"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/ship:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Ship order
      description: Mark an order as shipped with optional delivery date
      tags:
        - Orders
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                expected_delivery:
                  type: string
                  format: date
                  example: "2024-02-01"
      responses:
        "200":
          description: Order shipped successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order shipped successfully"
        "400":
          description: Invalid request data
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/deliver:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Deliver order
      description: Mark an order as delivered and trigger invoice generation
      tags:
        - Orders
      responses:
        "200":
          description: Order delivered and invoice generated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order delivered successfully"
                  note:
                    type: string
                    example: "Invoice will be automatically generated"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/cancel:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Cancel order
      description: Cancel a pending order
      tags:
        - Orders
      responses:
        "200":
          description: Order cancelled successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Order cancelled successfully"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /orders/{orderId}/history:
    parameters:
      - name: orderId
        in: path
        required: true
        description: Order ID
        schema:
          $ref: "#/components/schemas/UUID"

    get:
      summary: Get order history
      description: Get the complete change history for an order
      tags:
        - Orders
        - History
      responses:
        "200":
          description: Order history
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/UUID"
                    order_id:
                      $ref: "#/components/schemas/UUID"
                    action:
                      type: string
                      example: "status_change"
                    old_value:
                      type: string
                      nullable: true
                      example: "pending"
                    new_value:
                      type: string
                      example: "approved"
                    changed_by:
                      $ref: "#/components/schemas/UUID"
                    changed_at:
                      type: string
                      format: date-time
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Order not found
        "500":
          description: Internal server error

  /invoices:
    post:
      summary: Create invoice
      description: Create an invoice for a completed order
      tags:
        - Invoices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/InvoiceCreate"
      responses:
        "201":
          description: Invoice created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "400":
          description: Invalid request or order not delivered
        "401":
          description: Unauthorized - missing or invalid token
        "409":
          description: Invoice already exists for this order
        "500":
          description: Internal server error

    get:
      summary: List invoices
      description: Get a paginated list of invoices for the authenticated tenant
      tags:
        - Invoices
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: List of invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /invoices/unpaid:
    get:
      summary: Get unpaid invoices
      description: Get all unpaid invoices for the authenticated tenant
      tags:
        - Invoices
      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"
      responses:
        "200":
          description: List of unpaid invoices
          content:
            application/json:
              schema:
                type: object
                properties:
                  invoices:
                    type: array
                    items:
                      $ref: "#/components/schemas/Invoice"
                  limit:
                    type: integer
                  offset:
                    type: integer
        "401":
          description: Unauthorized - missing or invalid token
        "500":
          description: Internal server error

  /invoices/{invoiceId}:
    parameters:
      - name: invoiceId
        in: path
        required: true
        description: Invoice ID
        schema:
          $ref: "#/components/schemas/UUID"

    get:
      summary: Get invoice by ID
      description: Get detailed information about a specific invoice
      tags:
        - Invoices
      responses:
        "200":
          description: Invoice details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Invoice"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Invoice not found
        "500":
          description: Internal server error

  /invoices/{invoiceId}/status:
    parameters:
      - name: invoiceId
        in: path
        required: true
        description: Invoice ID
        schema:
          $ref: "#/components/schemas/UUID"

    put:
      summary: Update invoice status
      description: Update the payment status of an invoice
      tags:
        - Invoices
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum: [unpaid, paid, overdue]
                  example: "paid"
              required:
                - status
      responses:
        "200":
          description: Invoice status updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invoice status updated successfully"
        "400":
          description: Invalid status value
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Invoice not found
        "500":
          description: Internal server error

  /invoices/{invoiceId}/generate-pdf:
    parameters:
      - name: invoiceId
        in: path
        required: true
        description: Invoice ID
        schema:
          $ref: "#/components/schemas/UUID"

    post:
      summary: Generate invoice PDF
      description: Generate and store a PDF version of the invoice
      tags:
        - Invoices
        - Documents
      responses:
        "200":
          description: PDF generated and stored successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "PDF generated and uploaded successfully"
                  pdf_url:
                    type: string
                    example: "https://storage.example.com/invoices/..."
                  expires_in:
                    type: string
                    example: "24 hours"
        "401":
          description: Unauthorized - missing or invalid token
        "404":
          description: Invoice not found
        "500":
          description: Internal server error

tags:
  - name: Products
    description: Product inventory management operations
  - name: Orders
    description: Order lifecycle management operations
  - name: Invoices
    description: Invoice generation and management operations
  - name: Images
    description: Product image management operations
  - name: Analytics
    description: Business analytics and reporting operations
  - name: Documents
    description: Document generation and storage operations
  - name: History
    description: Audit trail and change history operations
  - name: System
    description: System health and monitoring operations